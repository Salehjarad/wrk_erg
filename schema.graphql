### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Attachment {
  created_at: DateTime!
  doc: Document!
  docId: Int!
  file_url: String
  id: Int!
  updated_at: DateTime!
}

input AttachmentWhereUniqueInput {
  id: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Document {
  attachment(after: AttachmentWhereUniqueInput, before: AttachmentWhereUniqueInput, first: Int, last: Int): [Attachment!]!
  content: String!
  doc_date: String!
  doc_number: String!
  doc_type: String!
  file_url: String
  id: Int!
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  user: User!
  userId: Int!
}

type DocumentSub {
  doc: Document
  mutation: String
}

input DocumentWhereUniqueInput {
  doc_number: String
  id: Int
}

type Mutation {
  addAttachment(docId: Int!, file: Upload): Attachment
  addNewUser(password: String!, type: Role! = VIEWER, username: String!): String
  createDocument(content: String!, doc_date: String!, doc_number: String!, doc_type: String!, file: Upload, hashtag: TagInput! = {value: ["new"]}): Document!
  createNewUser(email: String!, password: String!, username: String!): UserPayload
  deleteDocment(id: Int!): Document!
  deleteOneUser(where: UserWhereUniqueInput!): User
  deleteTag(value: String): Boolean
  login(password: String!, username: String!): UserPayload
  updateUserFromAdmin(password: String, type: Role, uid: Int!, updateType: String!, username: String): String
}

type Query {
  documents(after: DocumentWhereUniqueInput, before: DocumentWhereUniqueInput, first: Int, last: Int): [Document!]!
  helloworld: String
  me: User
  search(query: String): [Document]
  tags(after: TagWhereUniqueInput, before: TagWhereUniqueInput, first: Int, last: Int): [Tag!]!
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

enum Role {
  ADMIN
  ROOT
  USER
  VIEWER
}

enum Rule {
  ADMIN
  USER
  VIEWER
}

type Subscription {
  document: DocumentSub
  live: String
}

type Tag {
  doc(after: DocumentWhereUniqueInput, before: DocumentWhereUniqueInput, first: Int, last: Int): [Document!]!
  id: Int!
  value: String!
}

input TagInput {
  value: [String]!
}

input TagWhereUniqueInput {
  id: Int
  value: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  created_at: DateTime!
  docs(after: DocumentWhereUniqueInput, before: DocumentWhereUniqueInput, first: Int, last: Int): [Document!]!
  email: String!
  fname: String
  id: Int!
  lname: String
  rule: Rule!
  updated_at: DateTime!
  username: String!
}

type UserPayload {
  token: String
  user: User
}

input UserWhereUniqueInput {
  email: String
  id: Int
  username: String
}
